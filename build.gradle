plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects { subproject ->
    apply plugin: 'java'
    apply plugin: 'jacoco'

    dependencies {
        implementation 'org.springframework.boot:spring-boot:3.2.4'
        implementation 'org.springframework.data:spring-data-commons:3.2.4'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'

        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'

        implementation 'org.mapstruct:mapstruct:1.5.5.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

        testImplementation("org.apache.httpcomponents.client5:httpclient5:5.2.1")

        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
        testImplementation 'org.mockito:mockito-core:5.12.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    }

    sourceSets {
        main {
            java {
                srcDirs = ['main']
            }
            resources {
                srcDirs = ['main/resources']
            }
        }
        test {
            java {
                srcDirs = ['test']
            }
            resources {
                srcDirs = ['test/resources']
            }
        }
    }

    test {
        useJUnitPlatform()
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn subprojects.test

    executionData.setFrom files(subprojects.collect {
        file("${it.buildDir}/jacoco/test.exec")
    })

    def classDirs = files(subprojects.collect {
        fileTree("${it.buildDir}/classes/java/main").matching {
            exclude(
                    '**/StreamLambdaHandler.class',
                    '**/config/**',
                    '**/mapper/**',
                    '**/entity/**',
                    '**/jpa/**',
                    '**/projection/**',
                    '**/exception/**'
            )
        }
    })

    def srcDirs = files(subprojects.collect {
        file("${it.projectDir}/main")
    })

    sourceDirectories.setFrom(srcDirs)
    classDirectories.setFrom(classDirs)

    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

test.finalizedBy jacocoRootReport

task jacocoRootCoverageVerification(type: JacocoCoverageVerification) {
    dependsOn subprojects.test

    executionData.setFrom files(subprojects.collect {
        file("${it.buildDir}/jacoco/test.exec")
    })

    def classDirs = files(subprojects.collect {
        fileTree("${it.buildDir}/classes/java/main").matching {
            exclude(
                    '**/StreamLambdaHandler.class',
                    '**/config/**',
                    '**/mapper/**',
                    '**/entity/**',
                    '**/jpa/**',
                    '**/projection/**',
                    '**/exception/**'
            )
        }
    })

    def srcDirs = files(subprojects.collect {
        file("${it.projectDir}/main")
    })

    sourceDirectories.setFrom(srcDirs)
    classDirectories.setFrom(classDirs)

    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }
}

check.dependsOn jacocoRootCoverageVerification
